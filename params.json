{"name":"とりあえず雑記帳","tagline":"","body":"# ByteStringとText\r\n\r\n## Stringは非効率\r\n\r\nHaskellの文字列は、標準ではStringの値として扱われます。\r\nしかしStringは、特に長い文字列については、速度的にもメモリ的にも非効率です。\r\n\r\nそのために、より効率良く文字列データを扱うために\r\n\r\n* Data.ByteString(ASCII文字用)\r\n* Data.Text(Unicode文字用)\r\n\r\nが用意されています。\r\n\r\n\r\n## なんかいっぱいある…\r\n\r\n実際にモジュールを見ると、用途によって、下記のようにいくつかの型が用意されています。\r\n\r\n||正格|遅延|\r\n|----|----|----|\r\n|Word8で管理|Data.ByteString|Data.ByteString.Lazy|\r\n|Charで管理|Data.ByteString.Char8|Data.ByteString.Lazy.Char8|\r\n|Text|Data.Text|Data.Text.Lazy|\r\n\r\n## Word8とCharの違い\r\n\r\n関数の引数/戻り値の型が、Word8となるかCharとなるかの違いです。\r\n\r\n例として、まずは下記のプログラムを見てみます。\r\n```haskell\r\nimport Prelude hiding (getLine, putStr)\r\nimport Data.ByteString\r\n\r\nmain :: IO ()\r\nmain = do\r\n    ln <- getLine\r\n    putStr ln\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}